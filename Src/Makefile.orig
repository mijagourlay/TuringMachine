# Makefile for tm
#
# Written and Copyright (C) 1997 by Michael J. Gourlay
#
# PROVIDED AS IS.  NO WARRENTIES, EXPRESS OR IMPLIED.
#
# INSTRUCTIONS:
#
# 0) Read the README file.  Then read this Makefile.
#
# 1) Make a backup copy of this Makefile.
#
# 2) Edit each of the variables before the "SRCS=" statement.
#
# 3) From the shell, type "make depend".
#    If this fails or if you don't have makedepend, just delete all of
#    the lines (if there are any) below the "depend:" rule near the
#    end of this Makefile.  Look for the rule that says "depend:" and
#    read the comments that follow it.
#
# 4) From the shell, type "make".
#
# 5) If there are any errors or compiler complaints, find out why and
#    fix them :).  Then send email to the author explaining the cause of
#    the problem, and its solution.  If it's a big deal, I'll put your
#    name in lights for the next release.  See the README file for
#    the author's internet email address.
#
#    But seriously folks, if you can't figure out the problem, send
#    the author email.  Before complaining, though, read the man
#    pages for your C compiler and your linker.  If you're using
#    static linking and you get a linker problem, try dynamic
#    libraries, and vice versa.
#
#
#    If all goes well, there will be an executable called "tm".
#


SHELL=/bin/sh


##
## C COMPILER
##
#
# You must use an ANSI C compiler.
#

#CC=ucbcc
#CC=apcc -DANSI
#CC=gcc -DANSI
CC=cc




##
## INCLUDE FLAGS:
##
# Set INCLUDE to refer to the place where your header files reside.
#
# Most machines can leave INCLUDE blank.
#
INCLUDE=


##
## DEBUG FLAGS
##
# -O usually means "optimize"
# -g usually means "debug"
#
# On most compilers, optimization and debugging flags are mutually
# exclusive.  A notable exception is the GNU C compiler, which can
# have both debugging and optimization.
#
# GNU C compiler supports -Wall for lots of warnings.
#
# SGI native compiler supports -fullwarn, so I use it for development
#
DEBUG=-O
DEBUG=-O -fullwarn
DEBUG=-g -O -Wall


##
## C COMPILER FLAGS
##
#
# Read the man page for your C compiler before sending me email about
# problems.
#
CFLAGS=$(DEBUG) $(INCLUDE) $(DREAL) -DSUNOS
CFLAGS=$(DEBUG) $(INCLUDE) $(DREAL) -DBUSY_BEAVER_SEARCH


##
## LIBRARIES
##
#
# Read the man page for your linker before sending me email about
# problems.
#
#
# Linux: Use ncurses instead of curses.
#
# Other machines: use curses
#
# SUNOS: Use the /usr/lib/debug/malloc.o module if you want to do
# -- memory checking.
# -- Also see the CFLAGS comments about memory checking under SUNOS.
#
LIBS = -lcurses /usr/lib/debug/malloc.o
LIBS = -lcurses
LIBS = -lncurses




#### ===========================
####
#### Nothing to edit below here
#### (except maybe the makedepend dependecies if you do not have "makedepend")
####
#### ===========================


SRCS = tm.c fifo.c

OBJS = tm.o fifo.o

TARGET=tm

DIST=FILES SUMS Makefile Makefile.orig README $(TARGET).README \
     *.[ch] *.tm *.tape tm.man

all: $(TARGET) tm.1

$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LIBS)

.c$(OBJ): $(SRCS)
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $<

tm.1: tm.man
	nroff -man tm.man > tm.1
	col -b < tm.1 > tm.txt

test: tm
	-for tm in fail*.tm ; do \
	  echo "---------" ; echo $$tm ; tm -m $$tm -t tape0 ; \
	done

clean:
	-rm -f core
	-rm -f $(OBJS)
	-rm -f *.log
	-rm -f *.dvi
	-rm -f *.aux
	-rm -f tm.c.tex
	-rm -f gmon.out

veryclean: clean
	-rm -f $(TARGET)
	-rm -f tm.1
	-rm -f tm.txt
	-rm -f tm.c.ps
	-rm -f out.tape


SUMS:
	sum $(DIST) | sort -n > SUMS

back: SUMS
	if [ -d backup ]; then echo "'backup' already exists" ; exit 1 ; fi
	if [ ! -d backup ]; then mkdir backup ; fi
	cp -p Makefile Makefile.orig
	cp -p README $(TARGET).README
	ls -ltr > FILES
	cp -p $(DIST) backup
	@echo
	@echo "NOW MOVE THE BACKUP DIRECTORY:"
	@echo "    mv backup `date +%d%b%y | tr '[A-Z]' '[a-z]'`"
	@echo

dist:
	tar cvf - $(DIST) | gzip > $(TARGET).tar.gz
	mv $(TARGET).tar.gz $(TARGET)-`date +%d%b%y | tr '[A-Z]' '[a-z]'`.tar.gz

ctags:
	ctags -t *.[ch]

unproto:
	unprotoize $(SRCS)

print:
	tgrind -h "Michael J. Gourlay" $(TARGET).c
	dvips -o $(TARGET).c.ps $(TARGET).c.dvi


ctrace:
	-mkdir trace
	-for cfile in $(SRCS) ; do \
	  ctrace -P -t 20 $$cfile > trace/$$cfile ; \
	done

depend: ctags
	makedepend $(INCLUDE) $(SRCS)


#### The lines which follow are automatically generated by
#### "makedepend" which is a program that automatically generates
#### dependency lists.  If your system does not have "makedepend"
#### then you should delete the lines after the line that says
#### "DO NOT DELETE THIS LINE"


# DO NOT DELETE THIS LINE -- make depend depends on it.

tm.o: /usr/include/stdio.h /usr/include/libio.h /usr/include/_G_config.h
tm.o: /usr/include/sys/cdefs.h /usr/include/stdlib.h /usr/include/features.h
tm.o: /usr/lib/gcc-lib/i486-linux/2.7.2/include/stddef.h /usr/include/errno.h
tm.o: /usr/include/linux/errno.h /usr/include/asm/errno.h
tm.o: /usr/include/alloca.h /usr/include/string.h /usr/include/unistd.h
tm.o: /usr/include/posix_opt.h /usr/include/gnu/types.h
tm.o: /usr/include/confname.h /usr/include/sys/types.h
tm.o: /usr/include/linux/types.h /usr/include/linux/posix_types.h
tm.o: /usr/include/asm/posix_types.h /usr/include/asm/types.h
tm.o: /usr/include/sys/bitypes.h /usr/include/signal.h
tm.o: /usr/include/linux/signal.h /usr/include/asm/signal.h
tm.o: /usr/include/getopt.h /usr/include/curses.h /usr/include/unctrl.h
tm.o: /usr/lib/gcc-lib/i486-linux/2.7.2/include/stdarg.h
tm.o: /usr/include/limits.h /usr/include/posix1_lim.h
tm.o: /usr/include/linux/limits.h /usr/include/posix2_lim.h fifo.h tm.h
fifo.o: /usr/include/stdio.h /usr/include/libio.h /usr/include/_G_config.h
fifo.o: /usr/include/sys/cdefs.h /usr/include/stdlib.h
fifo.o: /usr/include/features.h
fifo.o: /usr/lib/gcc-lib/i486-linux/2.7.2/include/stddef.h
fifo.o: /usr/include/errno.h /usr/include/linux/errno.h
fifo.o: /usr/include/asm/errno.h /usr/include/alloca.h /usr/include/string.h
fifo.o: /usr/include/unistd.h /usr/include/posix_opt.h
fifo.o: /usr/include/gnu/types.h /usr/include/confname.h
fifo.o: /usr/include/sys/types.h /usr/include/linux/types.h
fifo.o: /usr/include/linux/posix_types.h /usr/include/asm/posix_types.h
fifo.o: /usr/include/asm/types.h /usr/include/sys/bitypes.h fifo.h
